1
00:00:00,000 --> 00:00:04,969
Bem vindo. Nesse screencast de 15 minutos vamos criar um blog em Ruby on Rails.

2
00:00:04,969 --> 00:00:10,936
Vamos começar com o comando "rails" passando "blog" pra ele e isso vai gerar os arquivos necessarios pra a aplicaÃ§Ã£o inicial em Rails.

3
00:00:11,600 --> 00:00:14,117
EntÃ£o podemos ir lÃ¡ e iniciar nosso servidor.

4
00:00:15,400 --> 00:00:20,340
Agora podemos ver se tudo estÃ¡ funcionando atÃ© aqui apontando nosso browser para localhost, porta 3000.

5
00:00:21,069 --> 00:00:22,956
Ai estÃ¡, parece que deu tudo certo.

6
00:00:23,367 --> 00:00:25,774
Nessa aplicaÃ§Ã£o queremos ter "posts".

7
00:00:26,586 --> 00:00:33,000
Podemos usar o comando "script/generate scaffold" para criar o modelo de "Post" e o controle pra gerencia-lo.

8
00:00:33,134 --> 00:00:36,850
Esse vai ter um tÃ­tulo e um corpo.

9
00:00:40,025 --> 00:00:45,069
Um dos arquivos que foi gerado aqui Ã© o arquivo "migration" e ele Ã© um jeito fÃ¡cil de administrar seu esquema de banco de dados.

10
00:00:45,169 --> 00:00:48,018
EntÃ£o aqui estamos criando uma tabela para "Posts" com algumas colunas.

11
00:00:48,118 --> 00:00:54,454
Agora podemos executar aquela "migration" com o comando "rake db:migrate" e isso vai cria a tabela de "Posts".

12
00:00:54,554 --> 00:00:55,611
Podemos iniciar nosso servidor.

13
00:00:58,189 --> 00:01:00,975
EntÃ£o podemos ir na url de Posts no browser e ver o que o esquema gerou.

14
00:01:02,229 --> 00:01:03,692
Como podemos ver aqui, podemos cria novos Posts

15
00:01:07,034 --> 00:01:09,474
e ainda edita-los.

16
00:01:16,000 --> 00:01:19,000
Se formos para nosso modelo de "Post", podemos adicionar algumas validações aqui.

17
00:01:20,362 --> 00:01:24,100
Vamos ter certeza que tenhamos um corpo e um título.

18
00:01:25,000 --> 00:01:28,050
Vamos ver o que acontece se editarmos nosso post

19
00:01:28,150 --> 00:01:29,150
e remover o título

20
00:01:29,250 --> 00:01:33,460
ai está, ele diz "Título não pode ser vazio". Coloco de volta e funciona.

21
00:01:34,400 --> 00:01:38,560
Seria legal se nossa pagina fosse um pouco mais apresentável, especiamente a pagina que lista todos os posts.

22
00:01:38,660 --> 00:01:41,099
Então vamos voltar para nosso código e ver o que podemos fazer.

23
00:01:41,199 --> 00:01:45,600
Vou começar com o arquivo "show" de Posts e em vez de fazer isso aqui

24
00:01:45,700 --> 00:01:50,944
vou colar um código pra exibir o post e alguns links.

25
00:01:51,543 --> 00:01:56,494
Agora temos que fazer algo parecido no nosso index também ou vamos exibir muitos posts

26
00:01:56,540 --> 00:02:00,650
mas eu quero que os posts sejam parecidos então o podemos fazer é mover esse pedaço de código

27
00:02:00,660 --> 00:02:03,181
e colocá-lo num "partial" pra exibir em vários templates.

28
00:02:04,281 --> 00:02:09,681
Para criar um "partial" so precisamos criar um arquivo aqui, começando com <i>undescore</i>, vamos chama-lo de "Post"

29
00:02:10,612 --> 00:02:12,934
então e copiar aquele conteúdo aqui.

30
00:02:13,034 --> 00:02:20,034
Em vez de acessar por variável de instancia, vamos acessar por variável local "post" que estará disponível para nós neste <i>partial</i>.

31
00:02:20,134 --> 00:02:25,221
De volta ao nosso template "show", vamos exibir o <i>partial</i>. Se passarmos nosso "Post" pra ele, Rails é esperto o bastante

32
00:02:25,234 --> 00:02:28,234
para fazer o link pois chamamos nosso <i>partial</i> de "post".

33
00:02:28,654 --> 00:02:31,138
Vamos exibir esse <i>partial</i> também na nossa index.

34
00:02:31,238 --> 00:02:35,921
Em vez de lista uma tabela aqui, vamos chamar <i>partial</i> Posts.

35
00:02:36,021 --> 00:02:40,540
Para cada Post na lista de Posts, será exibido o <i>partial</i>.

36
00:02:40,937 --> 00:02:47,467
Se voltarmos para nosso browser e recarregar, ai está, muito mais bonito. Ainda poderiamos fazer muita coisa aqui mas vamos adiante.

37
00:02:47,694 --> 00:02:54,241
Até aqui só usamos a representação HTML dos nossos Posts mas se queremos interagir com nossa aplicação em outros modos?

38
00:02:54,785 --> 00:02:58,085
Tudo que temos que fazer é adicionar uma extensão a nossa URL, então se chamarmos "post.xml"

39
00:02:58,186 --> 00:03:04,050
receberemos a representaçao XML dos nossos posts e poderemos usar XML pra gerenciar um post completamente.

40
00:03:05,991 --> 00:03:11,587
Se olharmos nosso controler de Posts podemos ver como isso funciona. É somente um bloco "respond_to" que lista os formatos que aceitamos,

41
00:03:11,687 --> 00:03:15,906
sendo assim é muito facil adicionar mais com somente uma linha. Então aqui adicionamos "json",

42
00:03:16,789 --> 00:03:22,517
agora é chamar com a extensão "json", aí está, nosso Post em formato JSON.

43
00:03:22,617 --> 00:03:23,617


