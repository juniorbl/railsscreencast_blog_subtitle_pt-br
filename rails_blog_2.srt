1
00:00:00,000 --> 00:00:04,969
Bem vindo. Nesse screencast de 15 minutos vamos criar um blog em Ruby on Rails.

2
00:00:04,969 --> 00:00:10,936
Vamos começar com o comando "rails" passando "blog" pra ele e isso vai gerar os arquivos necessarios pra a aplicaÃ§Ã£o inicial em Rails.

3
00:00:11,600 --> 00:00:14,117
EntÃ£o podemos ir lÃ¡ e iniciar nosso servidor.

4
00:00:15,400 --> 00:00:20,340
Agora podemos ver se tudo estÃ¡ funcionando atÃ© aqui apontando nosso browser para localhost, porta 3000.

5
00:00:21,069 --> 00:00:22,956
Ai estÃ¡, parece que deu tudo certo.

6
00:00:23,367 --> 00:00:25,774
Nessa aplicaÃ§Ã£o queremos ter "posts".

7
00:00:26,586 --> 00:00:33,000
Podemos usar o comando "script/generate scaffold" para criar o modelo de "Post" e o controle pra gerencia-lo.

8
00:00:33,134 --> 00:00:36,850
Esse vai ter um tÃ­tulo e um corpo.

9
00:00:40,025 --> 00:00:45,069
Um dos arquivos que foi gerado aqui Ã© o arquivo "migration" e ele Ã© um jeito fÃ¡cil de administrar seu esquema de banco de dados.

10
00:00:45,169 --> 00:00:48,018
EntÃ£o aqui estamos criando uma tabela para "Posts" com algumas colunas.

11
00:00:48,118 --> 00:00:54,454
Agora podemos executar aquela "migration" com o comando "rake db:migrate" e isso vai cria a tabela de "Posts".

12
00:00:54,554 --> 00:00:55,611
Podemos iniciar nosso servidor.

13
00:00:58,189 --> 00:01:00,975
EntÃ£o podemos ir na url de Posts no browser e ver o que o esquema gerou.

14
00:01:02,229 --> 00:01:03,692
Como podemos ver aqui, podemos cria novos Posts

15
00:01:07,034 --> 00:01:09,474
e ainda edita-los.

16
00:01:16,000 --> 00:01:19,000
Se formos para nosso modelo de "Post", podemos adicionar algumas validações aqui.

17
00:01:20,362 --> 00:01:24,100
Vamos ter certeza que tenhamos um corpo e um título.

18
00:01:25,000 --> 00:01:28,050
Vamos ver o que acontece se editarmos nosso post

19
00:01:28,150 --> 00:01:29,150
e remover o título

20
00:01:29,250 --> 00:01:33,460
ai está, ele diz "Título não pode ser vazio". Coloco de volta e funciona.

21
00:01:34,400 --> 00:01:38,560
Seria legal se nossa pagina fosse um pouco mais apresentável, especiamente a pagina que lista todos os posts.

22
00:01:38,660 --> 00:01:41,099
Então vamos voltar para nosso código e ver o que podemos fazer.

23
00:01:41,199 --> 00:01:45,600
Vou começar com o arquivo "show" de Posts e em vez de fazer isso aqui

24
00:01:45,700 --> 00:01:50,944
vou colar um código pra exibir o post e alguns links.

25
00:01:51,543 --> 00:01:56,494
Agora temos que fazer algo parecido no nosso index também ou vamos exibir muitos posts

26
00:01:56,540 --> 00:02:00,650
mas eu quero que os posts sejam parecidos então o podemos fazer é mover esse pedaço de código

27
00:02:00,660 --> 00:02:03,181
e colocá-lo num "partial" pra exibir em vários templates.

28
00:02:04,281 --> 00:02:09,681
<i>Para criar um "partial" so precisamos criar um arquivo aqui, começando com undescore, vamos chama-lo de "Post"</i>

29
00:02:10,612 --> 00:02:12,934
então e copiar aquele conteúdo aqui.

30
00:02:13,034 --> 00:02:20,034
<i>Em vez de acessar por variável de instancia, vamos acessar por variável local "post" que estará disponível para nós neste partial.</i>

31
00:02:20,134 --> 00:02:25,221
<i>De volta ao nosso template "show", vamos exibir o partial. Se passarmos nosso "Post" pra ele, Rails é esperto o bastante</i>

32
00:02:25,234 --> 00:02:28,234
<i>para fazer o link pois chamamos nosso partial de "post".</i>

33
00:02:28,654 --> 00:02:31,138
<i>Vamos exibir esse partial também na nossa index.</i>

34
00:02:31,238 --> 00:02:35,921
<i>Em vez de lista uma tabela aqui, vamos chamar partial Posts.</i>

35
00:02:36,021 --> 00:02:40,540
<i>Para cada Post na lista de Posts, será exibido o partial.</i>

36
00:02:40,937 --> 00:02:47,467
Se voltarmos para nosso browser e recarregar, ai está, muito mais bonito. Ainda poderiamos fazer muita coisa aqui mas vamos adiante.

37
00:02:47,694 --> 00:02:54,241
Até aqui só usamos a representação HTML dos nossos Posts mas se queremos interagir com nossa aplicação em outros modos?

38
00:02:54,785 --> 00:02:58,085
Tudo que temos que fazer é adicionar uma extensão a nossa URL, então se chamarmos "post.xml"

39
00:02:58,186 --> 00:03:04,050
receberemos a representaçao XML dos nossos posts e poderemos usar XML pra gerenciar um post completamente.

40
00:03:05,991 --> 00:03:11,587
Se olharmos nosso controler de Posts podemos ver como isso funciona. É somente um bloco "respond_to" que lista os formatos que aceitamos,

41
00:03:11,687 --> 00:03:15,906
sendo assim é muito facil adicionar mais com somente uma linha. Então aqui adicionamos "json",

42
00:03:16,789 --> 00:03:22,517
agora é chamar com a extensão "json", aí está, nosso Post em formato JSON.

43
00:03:23,430 --> 00:03:27,470
Que tipo de blog é esse que não tem nenhum tipo "feed"? Então vamos adicionar um feed

44
00:03:27,314 --> 00:03:31,314
fazendo com que ele responda ao formato "atom". Se deixarmos assim será mostrado sem um arquivo,

45
00:03:31,414 --> 00:03:39,057
então assim como o html é mostrado em uma versão html do arquivo, vamos fazer uma visão do index pra "atom".

46
00:03:39,776 --> 00:03:43,910
Então vamos criar um novo arquivo, vamos chama-lo de "index" que é o nome de nossa ação,

47
00:03:43,910 --> 00:03:49,931
"atom" que é o formato, e qualquer linguagem de template, poderiamos usar "erb" aqui

48
00:03:49,552 --> 00:03:53,599
mas vamos usar "builder" por que é muito bom para montar arquivos XML.

49
00:03:53,685 --> 00:03:59,119
Deixe-me adicionar um pouco de código aqui pra gerar o feed. Basicamente ele percorre todos os posts

50
00:03:59,120 --> 00:04:01,668
e faz uma nova entrada do feed para cada um.

51
00:04:01,859 --> 00:04:07,080
Se chamarmos nossa url de posts novamente com a extensão "atom", ai está, nosso atom feed.

52
00:04:08,360 --> 00:04:13,143
Podemos ir agora para o nosso arquivo de layout de post e dentro do HEAD vamo adicionar um código

53
00:04:13,243 --> 00:04:19,394
chamado "auto_discovery_link_tag" para criar um link com o nosso feed.

54
00:04:19,877 --> 00:04:26,843
Se recarregarmos nosso site novamente, agora temos um link RSS aqui onde nos leva ao nosso feed de ATOM.

55
00:04:26,943 --> 00:04:28,933
Muito legal.

56
00:04:29,033 --> 00:04:32,001
Mas se alguem vier aqui e editar no nosso post pode inserir coisas ofensivas,

57
00:04:32,200 --> 00:04:35,896
nós não queremos isso então vamos proteger nos proteger com uma autenticação básica.

58
00:04:36,696 --> 00:04:41,147
De volta ao nosso controller de posts, podemos inserir comportamento usando "before_filter",

59
00:04:41,247 --> 00:04:42,447
vamos chama-lo de "authenticate".

60
00:04:43,933 --> 00:04:47,764
Isso é quando queremos mudar um comportamento quando uma dada ação é chamada.

61
00:04:47,864 --> 00:04:55,102
Então queremos que tudo seja autenticado menos as ações "index" e "show".

62
00:04:55,202 --> 00:05:02,927
Podemos adicionar o método de autenticação aqui embaixo, vamos fazê-lo privado, ele não é uma ação pública

63
00:05:03,027 --> 00:05:05,027
e vamos chama-lo de "authenticate".

64
00:05:05,127 --> 00:05:09,986
E aqui dentro podemos inserir um código para fazer autenticação HTTP básica,

65
00:05:10,086 --> 00:05:13,330
so pra garantir que o usuário é "admin" e a senha é "secret".

66
00:05:13,430 --> 00:05:17,741
Se isso falhar o usuário não poderá continuar com a ação.

67
00:05:17,841 --> 00:05:22,757
Se tentarmos editar esse post novamente, receberemos uma caixa de autenticação, informo os dados

68
00:05:22,857 --> 00:05:26,001
e aí esta, agora podemos continuar.

69
00:05:26,101 --> 00:05:31,440
Vamos tentar editar e ver se funciona, aí está, somente administradores podem editar.

70
00:05:31,540 --> 00:05:35,040
Não seria legal se outros pudessem adicionar comentários a esse post?

71
00:05:35,140 --> 00:05:40,427
Novamente vamos usar o comando "script/generate scaffold" para gerar um modelo e controle de Comentario.

72
00:05:40,527 --> 00:05:48,481
E vamos da-lo uma coluna chamada "post_id" que será usado pra determinar a que post o comentário pertence,

73
00:05:48,581 --> 00:05:51,341
e podemos da-lo um corpo pra o texto.

74
00:05:51,441 --> 00:05:56,495
Não esqueça de executar a migração com o comando "rake db:migrate" pra gerar a tabela de comentário.

75
00:05:56,595 --> 00:06:00,791
Agora temos dois modelos, Comentario e Post, e eles precisam ser associados.

76
00:06:00,891 --> 00:06:04,367
Se fomos no nosso Post podemos dizer que ele tem muitos comentários (has_many: comments)

77
00:06:04,467 --> 00:06:09,429
e em Comentario dizer que ele pertence a um Post (belongs_to: Post).

78
00:06:09,529 --> 00:06:14,653
Agora usamos aquela coluna "post_id" em Comentario para liga-los.

79
00:06:14,753 --> 00:06:20,412
Podemos também fazer essa associação no nosso arquivo de rotas, informando que Posts tem muitos Comentarios.

80
00:06:24,387 --> 00:06:30,629
O que isso faz é adicionar comentario dentro de nosso url de post, que podemos ver se chamarmos o comando "rake routes".

81
00:06:31,465 --> 00:06:37,781
É um pouco difícil de ver nessa tela pequena mas você pode ver que temos posts e então temos comentarios na url de posts.

82
00:06:38,942 --> 00:06:43,670
Para uma dada página de post nós queremos listar todos os comentários daquele post

83
00:06:43,680 --> 00:06:46,720
e ter um formulário para enviar novos comentários.

84
00:06:47,301 --> 00:06:51,271
Se formos em view/posts/show que é onde queremos listar os comentários,

85
00:06:52,271 --> 00:07:03,810
vamos colocar "Comentários" aqui, uma DIV, id "comentarios" e vamos mostar um "partial"

86
00:07:05,482 --> 00:07:10,535
de "post.comments". Esse ".comments" nos foi dado quando dissemos que post tem muitos comentarios no modelo de post.

87
00:07:10,635 --> 00:07:16,535
Basta chamar "post.comments" para referencia-los.

88
00:07:16,635 --> 00:07:19,948
Agora podemos criar aquele "partial" para os comentários quase do mesmo modo que fizemos com o de Post.

89
00:07:20,048 --> 00:07:22,048
Vamos chama-lo de "comment"

90
00:07:24,244 --> 00:07:29,282
vou colar um código aqui basicamente pra exibir o conteúdo do comentário.

91
00:07:30,282 --> 00:07:34,275
De volta a nossa página "show" de Post, nós também queremos um formulário aqui para submeter um novo comentário.

92
00:07:34,375 --> 00:07:44,515
então vou colar ele aqui. Isso cria um novo formulário para um comentário dentro de um Post e exibe o campo para o corpo.

93
00:07:44,745 --> 00:07:49,832
Se voltarmos para nossa página do Post no browser, podemos recarregar e aí está, aqui estão os comentários, irá lista os comentários

94
00:07:49,932 --> 00:07:55,103
mas tem nenhum agora para este post e um formulário para submeter um novo comentário.

95
00:07:55,203 --> 00:07:59,074
O formulário não funciona ainda por que temos que configurar nosso controller de Comentario.

96
00:07:59,174 --> 00:08:04,064
Vamos ao nosso controller de Comentario e podemos ver que "scaffold" já gerou algumas ações pra nós aqui

97
00:08:04,065 --> 00:08:08,269
mas so temos interesse em fazer uma coisa com comentários que é cria-los.

98
00:08:08,369 --> 00:08:13,772
Então vou apagar tudo isso e recriar fazendo uma ação chamada "create" aqui.

99
00:08:14,515 --> 00:08:17,394
Aqui eu quero fazer três coisas: primeira é achar meu Post,

100
00:08:19,043 --> 00:08:20,738
com meu parametro "post_id",

101
00:08:20,838 --> 00:08:29,840
e é nele que vou contruir meu comentário, então posso chamar "post.comments.build" para adicionar um novo comentário para este post

102
00:08:29,940 --> 00:08:37,990
usando o paramentro de comentário, que é o hash que o formulário envia, isso vai adicionar o corpo do nosso comentário.

103
00:08:35,072 --> 00:08:42,704
E finalmente redirecionar para nossa página de post.

104
00:08:42,804 --> 00:08:45,908
Agora podemos testar, vamos criar um comentário,

105
00:08:47,008 --> 00:08:52,897
submeter isso e parece que submeteu o formulário mas não tem nenhum comentário listado aqui,

106
00:08:52,997 --> 00:08:56,891
alguma coisa não está funcionando. Provavelmente não está sendo salvo no banco de dados.

107
00:08:57,216 --> 00:09:01,903
Esse é um bom momento pra mostrar nossa opção de debug no rails. Vamos voltar para nosso controller de Comentario,

108
00:09:02,002 --> 00:09:09,314
adicionar a linha "debugger" e quando iniciar nosso servidor passamos a opção "debugger".

109
00:09:10,173 --> 00:09:15,374
Agora tentamos se submeter nosso comentário novamente, o browser irá esperar por que estará esperando pelo debugger.

110
00:09:15,474 --> 00:09:20,158
Quando voltamos para nossa linha de comando podemos ver que o debugger está esperando por nós aqui.

111
00:09:20,258 --> 00:09:25,011
Podemos ver onde estamos no código, podemos subir na pilha se quisermos,

112
00:09:26,533 --> 00:09:28,700
podemos ver variáveis se quisermos,

113
00:09:30,450 --> 00:09:31,550
voltar na pilha

114
00:09:32,700 --> 00:09:36,200
e até entrar no IRB.

115
00:09:37,147 --> 00:09:41,288
Isso nos permitirá inserir qualquer código ruby,

116
00:09:42,542 --> 00:09:44,984
então podemos ver nossa variável "comment",

117
00:09:45,305 --> 00:09:47,156
podemos checar se é um registro novo,

118
00:09:48,056 --> 00:09:52,062
e atualmente é um registro novo então não está sendo salvo no banco de dados,

119
00:09:52,312 --> 00:09:53,212
vamos tentar salva-lo,

120
00:09:53,962 --> 00:09:55,562
e continuar daqui.

121
00:09:58,424 --> 00:10:03,625
De volta ao browser vemos que a página terminou de carregou por que liberamos nosso debugger,

122
00:10:03,875 --> 00:10:14,275
e nosso comentário está aparecendo aqui por que mudamos o comportamento em tempo de execução e salvamos nosso comentário.

123
00:10:14,725 --> 00:10:17,725
Então sabemos que nosso comentário não está sendo salvo aqui mas por que?

124
00:10:17,975 --> 00:10:23,175
Parece que esse método "build" so constroi nosso comentário em memória, ele não salva no banco de dados,

125
00:10:23,225 --> 00:10:25,325
para salvar temos que chamar "create".

126
00:10:25,575 --> 00:10:29,475
isso vai adicionar nosso comentário ao post e salva-lo no banco de dados.

127
00:10:30,125 --> 00:10:31,825
Vamos tentar mais uma vez.

128
00:10:33,175 --> 00:10:38,275
Tento submeter nosso comentário. Aí está, tudo funcionando corretamente sem o uso do debugger.

129
00:10:38,525 --> 00:10:42,025
Agora digamos que queremos adicionar AJAX aqui quando submetemos nosso comentário,

130
00:10:42,275 --> 00:10:46,175
em vez de recarregar a página, ele vai submeter o comentário

131
00:10:46,425 --> 00:10:52,125
por baixo dos panos usando javascript e atualizar os elementos da página instantaneamente.

132
00:10:52,275 --> 00:10:54,175
Rails faz isso ficar muito fácil.

133
00:10:54,825 --> 00:10:59,125
O primeiro passo é incluir os arquivos de javascript necessários ao nosso arquivo de layout.

134
00:11:00,275 --> 00:11:03,175
Faço isso com a tag javascript, "all" pra carregar tudo.

135
00:11:03,425 --> 00:11:07,225
Próximo passo é mudar nosso formulário de comentário para nossos dados irem via AJAX.

136
00:11:07,475 --> 00:11:12,175
É muito simples, é so mudar "form_for" para "remote_form_for".

137
00:11:12,425 --> 00:11:18,225
E finalmente temos que mudar nosso controller de Comentario para ele responder para javascript.

138
00:11:18,875 --> 00:11:21,275
Podemos fazer isso com um bloco de código "respond_to".

139
00:11:24,225 --> 00:11:30,025
e novamente aqui queremos reponder para HTML e redirecionar se for uma requisição HTML simples.

140
00:11:30,775 --> 00:11:33,475
Se for javascript nós queremos exibir um template.

141
00:11:33,925 --> 00:11:36,925
Podemos fazer isso adicionando um novo template em views/comments.

142
00:11:37,375 --> 00:11:41,675
Esse se chamará "create.js" por que queremos responder para javascript

143
00:11:41,925 --> 00:11:45,425
e ".rjs" pois ele usará RJS para exibir o template.

144
00:11:45,675 --> 00:11:51,075
Esse é um modo que Rails fornece para gerar javascript usando Ruby.

145
00:11:51,725 --> 00:11:56,225
Aqui nós queremos fazer 3 coisas: queremos inserir nosso comentário,

146
00:11:56,475 --> 00:11:58,275
na DIV "comments",

147
00:11:58,725 --> 00:12:01,025
queremos faze-lo "piscar",

148
00:12:02,075 --> 00:12:04,975
e apagar nosso formulário de comentário.

149
00:12:05,525 --> 00:12:07,625
Agora podemos testar. Vamos submeter um novo comentário,

150
00:12:11,275 --> 00:12:18,675
E aí está. Ele inseriu o comentário, fez ele piscar e limpou o formulário, tudo sem recarregar a página usando AJAX.

151
00:12:19,025 --> 00:12:23,925
Mas o que acontece se o usuário não tem javascript habilitado no browser? Vamos testar.

152
00:12:24,375 --> 00:12:25,975
Vamos recarregar a página

153
00:12:26,625 --> 00:12:28,425
e tentar submeter o formulário.

154
00:12:32,475 --> 00:12:42,975
Funcionou, ele recarregou a página, de volta ao velho formato HTML onde ele recarrega a página quando submetemos um comentário.

155
00:12:43,225 --> 00:12:45,725
Então ele funciona com ou sem javascript habilitado.

156
00:12:45,775 --> 00:12:49,475
Testar esses comportamentos constantemente é um pouco chato,

157
00:12:49,725 --> 00:12:55,125
toda vez que você fizer uma modificação no futuro no seu blog pra ter certeza que funciona com ou sem javascript.

158
00:12:55,375 --> 00:13:01,375
Rails encoraja você a adicionar testes automatizados na aplicação usando código.

159
00:13:01,925 --> 00:13:05,225
Se formos na nossa aplicação podemos ver que temos aqui um diretório de testes aqui

160
00:13:05,475 --> 00:13:08,575
que é gerado pelo Rails para toda aplicação.

161
00:13:08,825 --> 00:13:12,325
Nós ja temos alguns testes aqui criados pelo comando "scaffold".

162
00:13:12,775 --> 00:13:19,275
Vamos ao nosso controller de Comentario por exemplo e testar nossa ação "create" com ou sem javascript.

163
00:13:16,325 --> 00:13:23,325
Mas já existem muitas ações que são testadas aqui que, você se lembra, nós removemos.

164
00:13:23,575 --> 00:13:26,975
Então vamos apagas todos elas e adicionar nós mesmos.

165
00:13:27,725 --> 00:13:31,625
Vamos ter alguma coisa parecida com isso: temos 2 teses aqui.

166
00:13:31,875 --> 00:13:39,675
Um para testar uma requisição normal HTML que nos redirecionamos depois de criar um comentário no post

167
00:13:39,925 --> 00:13:46,325
e outra para garantir que ele exibirá o template RJS quando fazemos uma requisição javascript.

168
00:13:46,575 --> 00:13:50,075
Ainda existem alguns testes que precisamos consertar no nosso controller de Post

169
00:13:50,325 --> 00:13:54,525
mas por enquanto vou comentar isso então podemos ver depois.

170
00:13:54,775 --> 00:13:58,475
Nesse momento quero focar o controller de Comentario.

171
00:13:58,725 --> 00:14:01,225
Agora podemos executar o comando "rake test:functionals"

172
00:14:03,175 --> 00:14:06,875
para rodar nosso novos testes do controller que acabamos de adicionar.

173
00:14:07,125 --> 00:14:13,525
Temos 2 pontos aqui que significa que os 2 testes passaram e nosso controller de Comentario está funcionando corretamente.

174
00:14:14,475 --> 00:14:19,275
Só para mostrar o que acontece quando nosso teste falha, vou renomear isso para algo incorreto.

175
00:14:19,625 --> 00:14:21,625
Agora vamos tentar rodar nossos testes novamente

176
00:14:22,375 --> 00:14:27,975
e como pode ver temos 2 falhas pois eu mudei a aplicação e ela não funciona corretamente.

177
00:14:28,225 --> 00:14:33,125
Como você pode ver testes automatizados é um jeito legal para não ter que ir no browser toda vez

178
00:14:33,275 --> 00:14:37,975
que fizer uma mudança e testar todas as páginas novamente para garantir que tudo funciona.

179
00:14:38,525 --> 00:14:43,325
Gostaria de concluir esse screencast mostando uma caracteristica "matadora" chamada "console".

180
00:14:44,275 --> 00:14:49,775
O que isso faz é carregar todo o seu ambiente Rails e te dar o IRB

181
00:14:49,825 --> 00:14:54,425
onde você pode digitar qualquer código que quiser, mudar um comportamento e ter um retorno instantâneo.

182
00:14:54,675 --> 00:14:59,075
Digamos que eu busque um post e

183
00:14:59,325 --> 00:15:01,125
vamos mudar o título por exemplo.

184
00:15:04,575 --> 00:15:05,775
e salva-lo.

185
00:15:06,825 --> 00:15:11,425
Se recarregarmos nossa pagina de post podemos ver que o título mudou.

186
00:15:11,975 --> 00:15:15,875
É um exelente modo de interagir com Rails instantaneamente via Ruby.

187
00:15:15,925 --> 00:15:20,925
Como pode ver Rails torna fácil fazer uma aplicação completa em pouco tempo.

188
00:15:21,075 --> 00:15:25,375
Fizemos aqui um blog com alguns posts, um RSS feed,

189
00:15:25,625 --> 00:15:27,725
alguns comentários usando AJAX

190
00:15:27,975 --> 00:15:31,375
e ainda tivemos tempo para alguns testes automatizados.

191
00:15:32,025 --> 00:15:36,468
Eu espero que tenha achado esse screencast útil e encorajo você a dar uma olhada em Rails você mesmo.

